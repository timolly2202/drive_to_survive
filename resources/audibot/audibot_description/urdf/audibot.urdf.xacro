<?xml version="1.0"?>
<robot name="audibot" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:property name="half_front_track_width" value="0.819" />
  <xacro:property name="half_rear_track_width" value="0.8" />
  <xacro:property name="half_wheelbase" value="1.326" />

  <xacro:property name="wheel_radius" value="0.36" />
  <xacro:property name="wheel_thickness" value="0.25" />
  <xacro:property name="wheel_mass" value="40.0" />

  <xacro:property name="body_mass" value="1620.0" />
  <xacro:property name="body_width" value="${2*half_rear_track_width}" />
  <xacro:property name="body_depth" value="${2*half_wheelbase + 0.8}" />
  <xacro:property name="body_length" value="0.6" />

  <xacro:arg name="pub_tf" default="true" />
  <xacro:arg name="robot_name" default="" />
  <xacro:arg name="blue" default="false" />

  <gazebo>
    <!-- Simulated vehicle interface -->
    <plugin name="audibot_interface_plugin" filename="libaudibot_interface_plugin.so" >
      <robot_name>$(arg robot_name)</robot_name>
      <pub_tf>$(arg pub_tf)</pub_tf>
      <tf_freq>100.0</tf_freq>
      <ros>
        <namespace>$(arg robot_name)</namespace>
      </ros>
    </plugin>

    <!-- Publish current joint angles -->
    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
        <joint_name>steer_fl_joint</joint_name>
        <joint_name>steer_fr_joint</joint_name>
        <joint_name>wheel_fl_joint</joint_name>
        <joint_name>wheel_fr_joint</joint_name>
        <joint_name>wheel_rl_joint</joint_name>
        <joint_name>wheel_rr_joint</joint_name>
        <update_rate>100</update_rate>
        <ros>
          <namespace>$(arg robot_name)</namespace>
        </ros>
    </plugin>
  </gazebo>

  <xacro:macro name="rear_wheel" params="name x y z flip" >
    <link name="wheel_${name}" >
      <visual>
        <origin xyz="0 0 0" rpy="1.57079632679 ${flip * 3.1415926535} 0" />
        <geometry>
          <mesh filename="file://$(find audibot_description)/meshes/wheel.dae" scale="1 1 1" />
        </geometry>
      </visual>

      <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}" />
        </geometry>
      </collision>

      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" ixy="0" ixz="0" iyy="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" iyz="0" izz="${wheel_mass/2 * wheel_radius*wheel_radius}"/>
      </inertial>

    </link>
    <joint name="wheel_${name}_joint" type="continuous" >
      <parent link="base_link" />
      <child link="wheel_${name}" />
      <origin xyz="${x} ${y} ${z}" rpy="-1.57079632679 0 0" />
      <axis xyz="0 0 1" />
      <limit effort="-1.0" velocity="-1.0" />
    </joint>
  </xacro:macro>

  <xacro:macro name="front_wheel" params="name x y z flip" >
    <link name="wheel_${name}" >
      <visual>
        <origin xyz="0 0 0" rpy="1.57079632679 ${flip * pi} 0" />
        <geometry>
          <mesh filename="file://$(find audibot_description)/meshes/wheel.dae" scale="1 1 1" />
        </geometry>
      </visual>

      <collision>
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_thickness}" />
        </geometry>
      </collision>

      <inertial>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" ixy="0" ixz="0" iyy="${wheel_mass/12*(3*wheel_radius*wheel_radius + wheel_thickness*wheel_thickness)}" iyz="0" izz="${wheel_mass/2 * wheel_radius*wheel_radius}"/>
      </inertial>
    </link>

    <link name="steer_${name}" >
      <inertial>
        <origin xyz="-0.013054 -0.0295 0" rpy="0 0 0"/>
        <mass value="20.0"/>
        <inertia ixx="2" ixy="0" ixz="0" iyy="2" iyz="0" izz="2"/>
      </inertial>
    </link>

    <joint name="steer_${name}_joint" type="revolute" >
      <parent link="base_link" />
      <child link="steer_${name}" />
      <origin xyz="${x} ${y} ${z}" rpy="0 0 0" />
      <axis xyz="0 0 1" />
      <limit upper="0.6" lower="-0.6" effort="-1.0" velocity="-1.0" />
    </joint>

    <joint name="wheel_${name}_joint" type="continuous" >
      <parent link="steer_${name}" />
      <child link="wheel_${name}" />
      <origin xyz="0 0 0" rpy="-1.57079632679 0 0" />
      <axis xyz="0 0 1" />
      <limit effort="-1.0" velocity="-1.0" />
    </joint>
  </xacro:macro>

  <link name="base_footprint">
  </link>

  <link name="base_link">
    <visual>
      <origin xyz="0.035 0 0.025" rpy="0 0 0" />
      <geometry>
        <xacro:if value="$(arg blue)" >
          <mesh filename="file://$(find audibot_description)/meshes/blue_body.dae" scale="1 1 1" />
        </xacro:if>
        <xacro:unless value="$(arg blue)" >
          <mesh filename="file://$(find audibot_description)/meshes/orange_body.dae" scale="1 1 1" />
        </xacro:unless>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0.035 0 0.025" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find audibot_description)/meshes/body_collision.stl" scale="1 1 1" />
      </geometry>
    </collision>
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="${body_mass}"/>
      <inertia ixx="${body_mass/12 * (body_width*body_width + body_length*body_length)}" ixy="0" ixz="0" iyy="${body_mass/12 * (body_length*body_length + body_depth*body_depth)}" iyz="0" izz="${body_mass/12 * (body_width*body_width + body_depth*body_depth)}"/>
    </inertial>
  </link>

  <joint name="base_link_joint" type="fixed">
    <origin xyz="${half_wheelbase} 0 ${wheel_radius}" rpy="0 0 0"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>

  <!-- Sensor links and fixed joints -->
  <!--link name="front_laser_link">
      <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry-->
          <!--mesh filename="package://rrbot_description/meshes/hokuyo.dae"/-->
            <!--box size="0.1 0.1 0.1"/>
        </geometry-->
        <!--material name="blue"/-->
      <!--/visual>

    <inertial>
      <mass value="1"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
  </link>

  <joint name="front_laser_joint" type="fixed">
    <parent link="base_link"/>
    <child link="front_laser_link"/>
    <origin xyz="${body_depth -1.05} 0 0.2" rpy="0 0 0"/>
  </joint-->

  <!-- Laser -->
  <joint name="laser_joint" type="fixed">
    <parent link="base_link" />
    <child link="laser_link" />
    <origin xyz="${body_depth -3.4} 0 0.2" rpy="0 0 0"/>
  </joint>
  <link name="laser_link"/>

  <joint name="camera_joint" type="fixed">  <!-- Front Camera - below onwards changed -->
    <parent link="base_link" />
    <child link="camera_link" />
    <origin xyz="${body_depth -1.05} 0 0.2" rpy="0 0 0"/>
  </joint>
  <link name="camera_link"/>

  <joint name="cam_back_joint" type="fixed">
  <parent link="base_link"/>
  <child link="camera_back_link"/>
  <origin xyz="-2.0 0.0 0.2" rpy="0 0 3.14159"/> 
</joint>
<link name="camera_back_link"/>

<joint name="cam_left_joint" type="fixed">
  <parent link="base_link"/>
  <child link="camera_left_link"/>
  <origin xyz="0.0 1.0 0.2" rpy="0 0 1.5708"/> 
</joint>
<link name="camera_left_link"/>

<joint name="cam_right_joint" type="fixed">
  <parent link="base_link"/>
  <child link="camera_right_link"/>
  <origin xyz="0.0 -1.0 0.2" rpy="0 0 -1.5708"/> 
</joint>
<link name="camera_right_link"/>
<!-- camera setup -->


  <xacro:rear_wheel name="rl" x="${-half_wheelbase}" y="${half_rear_track_width}" z="0" flip="1" />
  <xacro:rear_wheel name="rr" x="${-half_wheelbase}" y="${-half_rear_track_width}" z="0" flip="0" />
  <xacro:front_wheel name="fl" x="${half_wheelbase}" y="${half_front_track_width}" z="0" flip="1" />
  <xacro:front_wheel name="fr" x="${half_wheelbase}" y="${-half_front_track_width}" z="0" flip="0" />

  <xacro:property name="wheel_friction" value="1.75" />

  <gazebo reference="base_link" >
    <mu1>0.5</mu1>
    <mu2>0.5</mu2>
  </gazebo>

  <gazebo reference="wheel_fl" >
    <mu1>${wheel_friction}</mu1>
    <mu2>${wheel_friction}</mu2>
  </gazebo>

  <gazebo reference="wheel_fr" >
    <mu1>${wheel_friction}</mu1>
    <mu2>${wheel_friction}</mu2>
  </gazebo>

  <gazebo reference="wheel_rl" >
    <mu1>${wheel_friction}</mu1>
    <mu2>${wheel_friction}</mu2>
  </gazebo>

  <gazebo reference="wheel_rr" >
    <mu1>${wheel_friction}</mu1>
    <mu2>${wheel_friction}</mu2>
  </gazebo>

  <gazebo reference="laser_link">
    <sensor type='ray' name='laser'>
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>30</update_rate>
      <always_on>true</always_on>      
      <ray>
        <scan>
          <horizontal>
            <samples>640</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle>3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>2.5</min>
          <max>100.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="laser_sensor" filename="libgazebo_ros_ray_sensor.so">
          <ros>
            <namespace>/$(arg robot_name)</namespace>
            <remapping>~/out:=laserscan</remapping>
          </ros>
          <frame_name>$(arg robot_name)/laser_link</frame_name>
          <output_type>sensor_msgs/LaserScan</output_type>
      </plugin>
    </sensor>
  </gazebo>

    <!-- ====== FRONT CAMERA ====== -->
<gazebo reference="camera_link">
  <sensor type="depth" name="front_camera_sensor">
    <camera>
      <horizontal_fov>2.1</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.1</near>
        <far>100</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.005</stddev>
      </noise>
    </camera>
    <visualize>true</visualize>

    <!-- "libgazebo_ros_depth_camera.so" for RGB-D -->
    <plugin name="front_camera_plugin" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>/$(arg robot_name)</namespace>
      </ros>
      <frame_name>$(arg robot_name)/camera_link</frame_name>
      <alwaysOn>true</alwaysOn>
      <updateRate>15.0</updateRate>

      <!-- Topics for color + depth -->
      <cameraName>$(arg robot_name)/front_camera</cameraName>
      <imageTopicName>$(arg robot_name)/front_camera/image_raw</imageTopicName>
      <cameraInfoTopicName>$(arg robot_name)/front_camera/camera_info</cameraInfoTopicName>
      <depthImageTopicName>$(arg robot_name)/front_camera/depth/image_raw</depthImageTopicName>
    </plugin>
  </sensor>
</gazebo>


<!-- ====== BACK CAMERA ====== -->
<gazebo reference="camera_back_link">
  <sensor type="depth" name="back_camera_sensor">
    <camera>
      <horizontal_fov>2.1</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.1</near>
        <far>100</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.005</stddev>
      </noise>
    </camera>
    <visualize>true</visualize>

    <plugin name="back_camera_plugin" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>/$(arg robot_name)</namespace>
      </ros>
      <frame_name>$(arg robot_name)/camera_back_link</frame_name>
      <alwaysOn>true</alwaysOn>
      <updateRate>15.0</updateRate>

      <!-- Topics for color + depth -->
      <cameraName>$(arg robot_name)/back_camera</cameraName>
      <imageTopicName>$(arg robot_name)/back_camera/image_raw</imageTopicName>
      <cameraInfoTopicName>$(arg robot_name)/back_camera/camera_info</cameraInfoTopicName>
      <depthImageTopicName>$(arg robot_name)/back_camera/depth/image_raw</depthImageTopicName>
    </plugin>
  </sensor>
</gazebo>


<!-- ====== LEFT CAMERA ====== -->
<gazebo reference="camera_left_link">
  <sensor type="depth" name="left_camera_sensor">
    <camera>
      <horizontal_fov>2.1</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.1</near>
        <far>100</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.005</stddev>
      </noise>
    </camera>
    <visualize>true</visualize>

    <plugin name="left_camera_plugin" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>/$(arg robot_name)</namespace>
      </ros>
      <frame_name>$(arg robot_name)/camera_left_link</frame_name>
      <alwaysOn>true</alwaysOn>
      <updateRate>15.0</updateRate>
      <!-- Topics for color + depth -->
      <cameraName>$(arg robot_name)/left_camera</cameraName>
      <imageTopicName>$(arg robot_name)/left_camera/image_raw</imageTopicName>
      <cameraInfoTopicName>$(arg robot_name)/left_camera/camera_info</cameraInfoTopicName>
      <depthImageTopicName>$(arg robot_name)/left_camera/depth/image_raw</depthImageTopicName>
    </plugin>
  </sensor>
</gazebo>


<!-- ====== RIGHT CAMERA ====== -->
<gazebo reference="camera_right_link">
  <sensor type="depth" name="right_camera_sensor">
    <camera>
      <horizontal_fov>2.1</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.1</near>
        <far>100</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.005</stddev>
      </noise>
    </camera>
    <visualize>true</visualize>

    <plugin name="right_camera_plugin" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>/$(arg robot_name)</namespace>
      </ros>
      <frame_name>$(arg robot_name)/camera_right_link</frame_name>
      <alwaysOn>true</alwaysOn>
      <updateRate>15.0</updateRate>
      <!-- Topics for color + depth -->
      <cameraName>$(arg robot_name)/right_camera</cameraName>
      <imageTopicName>$(arg robot_name)/right_camera/image_raw</imageTopicName>
      <cameraInfoTopicName>$(arg robot_name)/right_camera/camera_info</cameraInfoTopicName>
      <depthImageTopicName>$(arg robot_name)/right_camera/depth/image_raw</depthImageTopicName>
    </plugin>
  </sensor>
</gazebo>



</robot>
